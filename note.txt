def rotate_image_numpy(file_path, output_path):
    """
    Rotate an image by 90 degrees using NumPy and save the result.

    Parameters:
    - file_path: The path to the input image file.
    - output_path: The path to save the rotated image.
    """
    try:
        # Open the image
        img = Image.open(file_path)

        # Convert the image to a NumPy array
        img_array = np.array(img)

        # Rotate the image array by 90 degrees
        rotated_img_array = np.rot90(img_array)

        # Convert the rotated array back to an image
        rotated_img = Image.fromarray(rotated_img_array)

        # Save the rotated image
        rotated_img.save(output_path)

        print(f"Image rotated and saved to {output_path}")

    except Exception as e:
        print(f"Error: {e}")

def invert_colors_numpy(file_path, output_path):
    """
    Invert the colors of an image using NumPy and save the result.

    Parameters:
    - file_path: The path to the input image file.
    - output_path: The path to save the color-inverted image.
    """
    try:
        # Open the image
        img = Image.open(file_path)

        # Convert the image to a NumPy array
        img_array = np.array(img)

        # Invert colors by subtracting each channel value from the maximum (255)
        inverted_img_array = 255 - img_array

        # Convert the inverted array back to an image
        inverted_img = Image.fromarray(inverted_img_array)

        # Save the color-inverted image
        inverted_img.save(output_path)

        print(f"Color-inverted image saved to {output_path}")

    except Exception as e:
        print(f"Error: {e}")

def serve_grayscale_image(image_path):
    """Serve the grayscale image."""
    try:
        # Read the grayscale image as binary data
        grayscale_image = open(image_path, 'rb').read()
        return grayscale_image
    except Exception as e:
        print(f"Error serving grayscale image: {e}")
        return None

        def make_image_grayscale_with_try_except(file_path, output_path):
    """
    Convert an image to grayscale using a try-except block for error handling.

    Parameters:
    - file_path: The path to the input image file.
    - output_path: The path to save the grayscale image.
    """
    try:
        # Open the image
        img = Image.open(file_path)

        # Convert the image to grayscale
        grayscale_img = img.convert('L')

        # Save the grayscale image
        grayscale_img.save(output_path)

        print(f"Grayscale image saved to {output_path}")

    except Exception as e:
        print(f"Error: {e}")